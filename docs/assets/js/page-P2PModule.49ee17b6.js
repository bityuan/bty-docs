(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{235:function(e,t,o){e.exports=o.p+"assets/img/P2P_template_interaction.21b85f1b.png"},558:function(e,t,o){"use strict";o.r(t);var n=o(1),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"p2p-module"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#p2p-module"}},[e._v("#")]),e._v(" P2P Module")]),e._v(" "),n("blockquote",[n("p",[e._v("P2P module is a component that processes communication between nodes, including node discovery and connection establishment, broadcasting blocks and transactions, and block synchronization.")])]),e._v(" "),n("h2",{attrs:{id:"p2p-module-interaction"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#p2p-module-interaction"}},[e._v("#")]),e._v(" P2P module interaction")]),e._v(" "),n("p",[n("img",{attrs:{src:o(235),alt:"P2 Pmodule interaction"}})]),e._v(" "),n("ul",[n("li",[e._v("Interaction with the Mempool module: broadcast the transactions sent by the Mempool module and obtain the transactions in the Mempool module.")]),e._v(" "),n("li",[e._v("Interactions with Blockchain module: broadcast blocks sent by Blockchain modules, process requests for peer information and requests for downloading blocks and block headers from peer node")])]),e._v(" "),n("h2",{attrs:{id:"p2p-logical-structure"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#p2p-logical-structure"}},[e._v("#")]),e._v(" P2P Logical Structure")]),e._v(" "),n("p",[e._v("P2P module contains the following functional modules:")]),e._v(" "),n("ul",[n("li",[e._v("Node discovery module: Discover the nodes in the network and try to establish a connection.")]),e._v(" "),n("li",[e._v("Data download module: Download blocks from peer node to synchronization.")]),e._v(" "),n("li",[e._v("Data filtering module: Filter duplicate transactions and blocks received.")]),e._v(" "),n("li",[e._v("Node monitoring module: Dynamically monitor peer nodes.")])]),e._v(" "),n("h3",{attrs:{id:"node-discovery-module"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node-discovery-module"}},[e._v("#")]),e._v(" Node Discovery Module")]),e._v(" "),n("p",[e._v("After the P2P module starts, the last saved remote node information will be read from the local database into the cache. If the local database information is empty, start loading seed nodes into the cache and try to connect them.")]),e._v(" "),n("p",[e._v("After connecting these nodes, if the maximum number of connections is not met, start to make a GetAddrList request to these nodes. After receiving the request, the peer node will return the node information currently connected including block height to the requester. The request node can choose the node to be connected according to its own block height, for example, choose the node higher than itself.")]),e._v(" "),n("p",[e._v("See getAddrFromAddrBook，getAddrFromOnline and other functions for details.")]),e._v(" "),n("h3",{attrs:{id:"data-download-module"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#data-download-module"}},[e._v("#")]),e._v(" Data Download Module")]),e._v(" "),n("p",[e._v("When synchronizing blocks, Blockchain module send EventFetchBlocks message to P2P module, and then P2P module makes a request to the connected nodes to download blocks.")]),e._v(" "),n("p",[e._v("There are two modes to download data: the first is to download from the specified node, the second is to make a balanced download from all connected nodes, in which case the nodes with strong service capacity will receive more download requests.")]),e._v(" "),n("p",[e._v("See GetBlocks, DownloadBlock and other functions for details.")]),e._v(" "),n("h3",{attrs:{id:"data-filtering-module"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#data-filtering-module"}},[e._v("#")]),e._v(" Data Filtering Module")]),e._v(" "),n("p",[e._v("The node will receive the transactions and blocks broadcast by other nodes in the network, and duplicate data will appear after multiple reception, so it needs to be filtered. Here, P2P module uses LRU data structure to cache transactions and blocks, and make filter in the interface functions of client and server.")]),e._v(" "),n("p",[e._v("Unfiltered transactions are sent to Mempool module for caching and broadcasting to other nodes, and blocks are sent to Blockchain module for packaging and broadcasting to other nodes.")]),e._v(" "),n("p",[e._v("See ServerStreamRead， readStream，RegRecvData and other functions for details.")]),e._v(" "),n("h3",{attrs:{id:"node-monitoring-module"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node-monitoring-module"}},[e._v("#")]),e._v(" Node Monitoring Module")]),e._v(" "),n("p",[e._v("In reality, the network environment is complex and changeable, and the nodes may be separated from P2P network due to machine failure or network environment impact. At this time, P2P modules are required to quickly find abnormal nodes, eliminate the nodes, and select new nodes to supplement.")]),e._v(" "),n("p",[e._v("P2P module also starts timing tasks to adjust the list of connection nodes in real time, including deleting the nodes with too many connections or too low connections, the nodes with too low block height, and seed nodes, etc.")]),e._v(" "),n("p",[e._v("See monitorErrPeer，monitorPeers， nodeReBalance and other functions for details.")])])}),[],!1,null,null,null);t.default=a.exports}}]);
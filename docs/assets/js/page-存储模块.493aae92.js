(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{240:function(t,s,a){t.exports=a.p+"assets/img/Storage_template_interaction.b7b85799.png"},241:function(t,s,a){t.exports=a.p+"assets/img/KVDB_Architecture.2ac6b472.png"},242:function(t,s,a){t.exports=a.p+"assets/img/goleveldb_Architecture.6013bca4.png"},243:function(t,s,a){t.exports=a.p+"assets/img/LocalDB_Architecture.21244727.png"},244:function(t,s,a){t.exports=a.p+"assets/img/statedb_Architecture.211d68a6.png"},245:function(t,s,a){t.exports=a.p+"assets/img/store_Architecture.a53f6aac.png"},579:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"存储模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#存储模块"}},[t._v("#")]),t._v(" 存储模块")]),t._v(" "),n("blockquote",[n("p",[t._v("比特元底层Chain33使用高性能、高可靠的KV数据库来进行区块链数据的存储，支持goleveldb、gobadgerdb、gomemdb、gossdb等KV数据库类型。区块链中的状态数据的的存储格式采用可配置、可插拔的方式，可以支持mavl、mpt、kvmvcc的存储格式。")])]),t._v(" "),n("h2",{attrs:{id:"模块介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模块介绍"}},[t._v("#")]),t._v(" 模块介绍")]),t._v(" "),n("p",[t._v("存储模块和传统的区块链实现相同，Chain33中使用高性能、高可靠的KV DB来进行数据的存储，并且设计上提供的DB接口也都是针对KV存储的特性定义的。")]),t._v(" "),n("p",[t._v("在chain33系统中，目前存在4个数据库实例，如下：")]),t._v(" "),n("blockquote",[n("p",[t._v("fzm@fzm001:~/chain33 $ ls datadir"),n("br"),t._v("\naddrbook blockchain.db mavltree wallet")])]),t._v(" "),n("p",[t._v("其中：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("addrbook")]),t._v("：实现的能力比较单一，主要是存储P2P的节点以及相关的状态信息。")]),t._v(" "),n("li",[n("strong",[t._v("wallet")]),t._v("：存储本地账号信息。")]),t._v(" "),n("li",[n("strong",[t._v("blockchain.db")]),t._v("：存储区块头、区块体以及区块相关的附加信息，还存储交易本地执行返回的结果信息。")]),t._v(" "),n("li",[n("strong",[t._v("store")]),t._v("：存储交易执行的结果以及区块状态哈希信息。")])]),t._v(" "),n("p",[t._v("对于Chain33的存储模块，有以下几个要点：")]),t._v(" "),n("ul",[n("li",[t._v("Chain33的底层存储及操作通过灵活配置可支持多种实现方式。")])]),t._v(" "),n("blockquote",[n("p",[t._v("底层根据配置可以支持多种类型的KV DB实现，比如goleveldb、gobadgerdb、gomemdb、gossdb等。\n上述addrbook、wallet、blockchain.db、store这4个数据库实例的底层存储操作都是通过配置的具体的KV DB来实现的，比如默认配置的goleveldb。")])]),t._v(" "),n("ul",[n("li",[t._v("实际应用中，Excutor执行器通过StateDB和LocalDB两个抽象数据库概念，分别用来对blockchain.db和store的存储进行消息查询等操作。")]),t._v(" "),n("li",[t._v("Store模块数据的存储格式，也采用可配置、可插拔的方式，默认支持mavl tree的存储格式。")])]),t._v(" "),n("p",[t._v("Chain33也支持用户自行扩展新的存储格式，比如单纯的KVDB存储格式、基于MVCC的KVDB存储格式、MPT存储格式等。但是，最终对数据存储的底层操作还是通过配置的具体的KV DB来实现的，比如goleveldb。")]),t._v(" "),n("h2",{attrs:{id:"逻辑架构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#逻辑架构"}},[t._v("#")]),t._v(" 逻辑架构")]),t._v(" "),n("h3",{attrs:{id:"存储模块交互"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#存储模块交互"}},[t._v("#")]),t._v(" 存储模块交互")]),t._v(" "),n("p",[n("img",{attrs:{src:a(240),alt:"存储模块交互"}})]),t._v(" "),n("ul",[n("li",[t._v("P2P、Wallet、Blockchain、Store几个模块均涉及数据存储，底层通过DB接口向KV DB实例写入及读出数据。")]),t._v(" "),n("li",[t._v("Blockchain及Store模块也提供数据查询接口，具体通过StateDB、LocalDB抽象数据库对象使用消息来进行操作。")]),t._v(" "),n("li",[t._v("BlockChain模块在生成区块时，可以通过消息向Store模块写入状态信息。")]),t._v(" "),n("li",[t._v("Wallet、Consensus、Client等模块可以通过执行器，由StateDB、LocalDB对象分别向Blockchain、Store使用消息发起数据查询。")]),t._v(" "),n("li",[t._v("Client模块也可以通过消息直接向Store发起状态数据查询。")])]),t._v(" "),n("h3",{attrs:{id:"底层存储kv-db的逻辑架构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#底层存储kv-db的逻辑架构"}},[t._v("#")]),t._v(" 底层存储KV DB的逻辑架构")]),t._v(" "),n("p",[n("img",{attrs:{src:a(241),alt:"KVDB逻辑架构"}})]),t._v(" "),n("p",[t._v("底层数据存储支持的kv db都需要适配上述接口。")]),t._v(" "),n("p",[t._v("以goleveldb为例：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(242),alt:"goleveldb"}})]),t._v(" "),n("p",[t._v("可以看到goleveldb实现了DB接口、Iterator接口、Batch接口，就可以作为存储模块的底层数据库实现来在chain33系统中被使用。")]),t._v(" "),n("p",[t._v("gobadgerdb、gomemdb、gossdb等不同的kv db的实现也是类似的，都需要实现DB接口、Iterator接口、Batch接口以满足上层逻辑功能的需要。")]),t._v(" "),n("h3",{attrs:{id:"statedb和localdb的逻辑架构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#statedb和localdb的逻辑架构"}},[t._v("#")]),t._v(" StateDB和LocalDB的逻辑架构")]),t._v(" "),n("p",[n("img",{attrs:{src:a(243),alt:"LocalDB逻辑架构"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(244),alt:"statedb逻辑架构"}})]),t._v(" "),n("p",[t._v("可见，这两个抽象数据库的功能非常简单，容易导致误解的是两个DB的使用场景和存储内容，所以下面使用表格方式，列出了两个DB之间的区别。")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}},[t._v("DB")]),t._v(" "),n("th",{staticStyle:{"text-align":"left"}},[t._v("StateDB")]),t._v(" "),n("th",{staticStyle:{"text-align":"left"}},[t._v("LocalDB")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("strong",[t._v("写数据目的")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("缓存")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("缓存")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("strong",[t._v("读数据来源")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("store")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("blockchain.db")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("strong",[t._v("执行器对应方法")]),t._v("(数据来源)")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Exec返回的KV")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("ExecLocal返回的KV")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("strong",[t._v("数据是否包含状态")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("是（读写数据都附带StateHash）")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("否（仅通过Key索引数据）")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("strong",[t._v("存储哪些数据")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("存储区块交易执行的kvset（kv数据库直接存储；mavl数据库以StateHash构造树存储）")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("存储区块的所有信息")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("strong",[t._v("是否校验数据")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("是（执行区块时重新计算StateHash校验）")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("否（直接写入）")])])])]),t._v(" "),n("h3",{attrs:{id:"store的逻辑架构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#store的逻辑架构"}},[t._v("#")]),t._v(" Store的逻辑架构")]),t._v(" "),n("p",[n("img",{attrs:{src:a(245),alt:"Store的逻辑架构"}})]),t._v(" "),n("ul",[n("li",[t._v("Store层决定了状态数据在底层KV DB中将以何种格式进行组织。")]),t._v(" "),n("li",[t._v("系统默认支持mavl tree格式的实现，通过加载插件还可支持单纯的KV DB的实现、基于MVCC的KV DB的实现、MPT的实现等。")]),t._v(" "),n("li",[t._v("开发者如果要扩展开发自己的数据组织格式，需要实现SubStore接口，并注册到系统中，做好对应配置即可。")])]),t._v(" "),n("h2",{attrs:{id:"处理逻辑"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#处理逻辑"}},[t._v("#")]),t._v(" 处理逻辑")]),t._v(" "),n("h3",{attrs:{id:"底层kv-db的主要接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#底层kv-db的主要接口"}},[t._v("#")]),t._v(" 底层KV DB的主要接口")]),t._v(" "),n("h4",{attrs:{id:"基本数据接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本数据接口"}},[t._v("#")]),t._v(" 基本数据接口")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("BatchGet")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("keys "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("values "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetSync")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Delete")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("DeleteSync")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v("    \n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("p",[t._v("这些就是基本的数据的读、写、删除接口，在加上关闭数据库的接口。纯粹的Key-Value操作，直接和具体数据库的接口对接即可。")]),t._v(" "),n("p",[t._v("有些数据库可能不支持异步写操作，这时只能都按照同步实现（这个对性能影响不大）。")]),t._v(" "),n("h4",{attrs:{id:"范围查找接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#范围查找接口"}},[t._v("#")]),t._v(" 范围查找接口")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("List")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prefix"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" count"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" direction "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("PrefixCount")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prefix "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])]),n("p",[t._v("这两个接口需要实现所谓的前缀查找，其实在KV的实现中，并不是纯粹的前缀查找，而是范围（Range）查找，因为匹配的数据KEY是根据prefix推算出来的范围进行查找的。")]),t._v(" "),n("p",[t._v("列举两个列子以帮助用户理解范围查找（这个查找效果和*后缀模糊匹配是同样的）。")]),t._v(" "),n("p",[t._v("例一： prefix=0xab9876abcd77ff")]),t._v(" "),n("p",[t._v("这时的查找范围是： 0xab9876abcd 77ff xxx  ~  0xab9876abcd 78ff xxx")]),t._v(" "),n("p",[t._v("例二：prefix=0xab9876abcd77ab")]),t._v(" "),n("p",[t._v("这时的查找范围是： 0xab9876abcd77 ab xxx  ~  0xab9876abcd77 ac xxx")]),t._v(" "),n("p",[t._v("其中的"),n("code",[t._v("count")]),t._v("是限定查找的个数，因为可能匹配的数据量很大，只返回前面的count个。")]),t._v(" "),n("p",[n("code",[t._v("direction")]),t._v("是匹配方向，正向就是从开始到结束，反向就是从结束到开始。")]),t._v(" "),n("p",[t._v("特别注意： 当count为0时（或PrefixCount接口），意思是返回所有匹配的数据，但是在具体数据库实现时，如果数据量特别大，可能会导致数据库挂死、网络超时、内存溢出等各种问题。\n比较保险的做法是：内部查找时做一下处理，每次只取固定条数的记录（比如1万条），然后分多次查找，最终汇总返回结果。")]),t._v(" "),n("h4",{attrs:{id:"批量数据接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#批量数据接口"}},[t._v("#")]),t._v(" 批量数据接口")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Batch "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Delete")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Write")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("p",[t._v("可以认为这是一个事务接口，可以进行多次Set和Delete操作，最终一次Write提交操作，要么全部成功要么全部失败。")]),t._v(" "),n("p",[t._v("在数据库实现时，特别是不支持原生事务的数据库时，可能要考虑折中实现，下面以ssdb的实现为例说明：")]),t._v(" "),n("ul",[n("li",[t._v("newBatch时，开辟两个缓存对象，分别用来存储修改和删除操作缓存队列。")]),t._v(" "),n("li",[t._v("Set操作时，检查Delete队列是否有相应Key，如有则从Delete队列删除，Set操作入Set队列。")]),t._v(" "),n("li",[t._v("Delete操作时，检查Set队列中是否有相应Key，如有则从Set队列删除，Delete操作入Delete队列。")]),t._v(" "),n("li",[t._v("Write操作时，向Set队列中插入所有Delete队列中的Key，Value设置为空，然后调批量Set接口，如失败，则返回，如成功，则调批量删除接口，然后返回成功。")])]),t._v(" "),n("p",[t._v("之所以这么操作，有两点考虑：")]),t._v(" "),n("ol",[n("li",[t._v("常规的事务操作是保证内部的操作顺序，所以在Set和Delete操作时，需要检查对方的队列，防止先Delete后Set出现的问题。")]),t._v(" "),n("li",[t._v("事务提交时，为了防止写成功，但删除失败的中间状态，所以在写操作的同时，将要删除的数据置空。")])]),t._v(" "),n("h4",{attrs:{id:"迭代器接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#迭代器接口"}},[t._v("#")]),t._v(" 迭代器接口")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" IteratorSeeker "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rewind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Seek")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Iterator "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        IteratorSeeker\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Valid")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Value")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ValueCopy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br")])]),n("p",[t._v("chain33中包装的迭代器，类似C中的指针或SQL中的游标的能力，Iterator中的接口很好实现，主要是IteratorSeeker中的三个方法，对有些数据库来说，实现起来存在一定的难度。")]),t._v(" "),n("p",[t._v("此处还是以ssdb为例，说明下迭代器的实现逻辑。迭代器的创建接口如下：")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//迭代prefix 范围的所有key value, 支持正反顺序迭代。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Iterator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prefix "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reserver "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" Iterator\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])]),n("p",[t._v("在创建迭代器时，包装了前缀查找的能力，在ssdb的实现逻辑如下：")]),t._v(" "),n("ol",[n("li",[t._v("使用prefix计算出匹配的开始和结束KEY。")]),t._v(" "),n("li",[t._v("使用生的keys或rkeys命令，查找满足此prefix前缀的所有KEY（使用1024进行分页），然后将这些信息包装进Iterator对象。")]),t._v(" "),n("li",[t._v("Next方法执行时，将游标+1，从缓存数组中获取对应的KEY，然后调用DB的Get接口获取数据；如果游标+1==1024，则以当前缓存数组中的最后一个元素KEY为开始，继续获取下一页KEY。")]),t._v(" "),n("li",[t._v("Seek方法执行时，会连续调用分页获取KEYS的逻辑，然后和key匹配，直到满足，或没有数据。")])]),t._v(" "),n("h4",{attrs:{id:"其它特定接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其它特定接口"}},[t._v("#")]),t._v(" 其它特定接口")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模拟事务接口")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Begin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rollback")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Commit")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("p",[t._v("上面三个方法是模拟事务操作，目前只在StateDB中实现，仅支持单线程内存事务，是在支持TxGroup概念的时候引入的。新增一种数据库实现时，不需要考虑对这三个接口的支持；且在自己的代码逻辑中，也不要调用这几个接口。")]),t._v(" "),n("h3",{attrs:{id:"statedb和localdb的相关主要接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#statedb和localdb的相关主要接口"}},[t._v("#")]),t._v(" StateDB和LocalDB的相关主要接口")]),t._v(" "),n("h4",{attrs:{id:"执行器中和数据存储相关的接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行器中和数据存储相关的接口"}},[t._v("#")]),t._v(" 执行器中和数据存储相关的接口：")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetStateDB")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dbm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("KV"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetLocalDB")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dbm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("KVDB"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Exec")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("types"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Transaction"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("types"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Receipt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ExecLocal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("types"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Transaction"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" receipt "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("types"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ReceiptData"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("types"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LocalDBSet"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ExecDelLocal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("types"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Transaction"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" receipt "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("types"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ReceiptData"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("types"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LocalDBSet"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("h5",{attrs:{id:"exec"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#exec"}},[t._v("#")]),t._v(" Exec")]),t._v(" "),n("p",[t._v("交易的具体执行逻辑，不管执行了什么逻辑，最终都会返回一个*types.Receipt对象，这个对象中包含了两部分内容（KV和Logs），其中KV将会被写入StateDB（"),n("font",{attrs:{color:"#FF0000"}},[t._v("最终写入store ")]),t._v("），而Logs将会作为入参，在调用ExecLocal时传入。")],1),t._v(" "),n("p",[t._v("默认的Exec方法，不生成任何数据。")]),t._v(" "),n("h5",{attrs:{id:"execlocal"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#execlocal"}},[t._v("#")]),t._v(" ExecLocal")]),t._v(" "),n("p",[t._v("交易的本地执行逻辑，这是一个附加的逻辑，两次执行结果不同，不会导致区块执行失败，这里的主要逻辑一般是使用Exec生成的信息，再生成一些附加信息，方便其它地方使用。")]),t._v(" "),n("p",[t._v("默认的ExecLocal方法，生成交易哈希对应的交易详情数据。")]),t._v(" "),n("p",[n("font",{attrs:{color:"#FF0000"}},[t._v("相关数据最终会被blockchain写入blockchain.db。")])],1),t._v(" "),n("h5",{attrs:{id:"execdellocal"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#execdellocal"}},[t._v("#")]),t._v(" ExecDelLocal")]),t._v(" "),n("p",[t._v("此方法和ExecLocal对应，是在处理分叉时调用，如果一个区块已经被执行，而后另一条链成为主链，那么已经执行的区块将会被回退，这时会调用ExecDelLocal逻辑。它将ExecLocal写入的数据进行回滚。")]),t._v(" "),n("h4",{attrs:{id:"statedb的主要接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#statedb的主要接口"}},[t._v("#")]),t._v(" StateDB的主要接口")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[t._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//通过消息EventStoreGet从Store（对应模块介绍中的store数据库）中获得状态数据。")]),t._v("\n     "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])]),n("h4",{attrs:{id:"localdb的主要接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#localdb的主要接口"}},[t._v("#")]),t._v(" LocalDB的主要接口：")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[t._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//通过消息EventLocalGet从BlockStore数据库（对应模块介绍中的blockchain.db数据库）中获得区块数据。")]),t._v("\n     "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n\n     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//通过消息EventLocalList从BlockStore数据库（对应模块介绍中的blockchain.db数据库）中查询数据列表。")]),t._v("\n     "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("List")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prefix"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" count"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" direction "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n\n     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//通过消息EventLocalPrefixCount从BlockStore数据库（对应模块介绍中的blockchain.db数据库）中查询指定前缀的key的数量。")]),t._v("\n     "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("PrefixCount")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prefix "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])]),n("h3",{attrs:{id:"substore的主要接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#substore的主要接口"}},[t._v("#")]),t._v(" SubStore的主要接口")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" SubStore "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//向对应StateHash写入KV信息。")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("datas "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("types"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("StoreSet"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sync "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获得对应StateHash的KV信息。")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("datas "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("types"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("StoreGet"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Blockchain模块生成区块时，设置对应StateHash的KVSet到内存。")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("MemSet")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("datas "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("types"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("StoreSet"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sync "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Blockchain模块生成区块时，将对应StateHash的内存KVSet写入到存储。")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Commit")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hash "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("types"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ReqHash"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Blockchain模块生成区块失败时，将对应StateHash的内存KVSet数据清除。")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rollback")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("req "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("types"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ReqHash"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//异常时，回滚已写入区块的StateHash对应的KV信息。")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Del")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("req "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("types"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("StoreDel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//对应于StateHash，遍历满足条件的Key、value，并使用fn函数进行处理。")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("IterateRangeByStateHash")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("statehash "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ascending "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fn "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//预留的事件处理接口。")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ProcEvent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Message"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br")])]),n("p",[t._v("新增的Store层插件类型，都需要实现上述接口，比如KV DB、KVMVCC DB、MPT等。")])])}),[],!1,null,null,null);s.default=e.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{682:function(n,s,t){"use strict";t.r(s);var e=t(1),a=Object(e.a)({},(function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"web3-js-合约部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web3-js-合约部署"}},[n._v("#")]),n._v(" web3.js 合约部署")]),n._v(" "),t("h3",{attrs:{id:"_1-合约编写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-合约编写"}},[n._v("#")]),n._v(" 1. 合约编写")]),n._v(" "),t("ul",[t("li",[n._v("编写一个 ERC1155 的智能合约，继承了 OpenZeppelin ERC1155 和 Ownable 合约")]),n._v(" "),t("li",[n._v("合约中有两个私有映射变量 _tokenSupply 和 _tokenURIs，分别用于存储每个 ERC1155 代币的供应量和 URI")]),n._v(" "),t("li",[n._v("在构造函数中，传入了基础 URI，用于确定代币的元数据")]),n._v(" "),t("li",[n._v("mint 函数可供所有者调用来铸造新的 ERC1155 代币。该函数调用了 _mint 函数将新代币的供应量添加到特定帐户中")]),n._v(" "),t("li",[n._v("_tokenSupply 和 _tokenURIs 映射都会更新，并触发 TokenMinted 事件。 该事件记录了代币 ID，代币供应量和代币 URI。tokenId 参数使用 indexed 修饰符进行标记，以便在事件日志中可以更快速地搜索并访问该参数。")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.3.0/contracts/token/ERC1155/ERC1155.sol";\nimport "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.3.0/contracts/access/Ownable.sol";\n\ncontract MyERC1155 is ERC1155, Ownable {\n\n    mapping(uint256 => uint256) private _tokenSupply;\n    mapping(uint256 => string) private _tokenURIs;\n\n    event TokenMinted(uint256 indexed tokenId, uint256 supply, string uri);\n\n    constructor(string memory uri) ERC1155(uri) {}\n\n    function mint(uint256 tokenId, uint256 supply, string memory uri) public onlyOwner {\n        _mint(msg.sender, tokenId, supply, "");\n        _tokenSupply[tokenId] += supply;\n        _tokenURIs[tokenId] = uri;\n        emit TokenMinted(tokenId, supply, uri);\n    }\n\n    function tokenSupply(uint256 tokenId) public view returns (uint256) {\n        return _tokenSupply[tokenId];\n    }\n\n    function uri(uint256 tokenId) public view override returns (string memory) {\n        return _tokenURIs[tokenId];\n    }\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br")])]),t("h3",{attrs:{id:"_2-合约编译"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-合约编译"}},[n._v("#")]),n._v(" 2. 合约编译")]),n._v(" "),t("p",[n._v("编译工具:")]),n._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://remix.ethereum.org/",target:"_blank",rel:"noopener noreferrer"}},[n._v("[在线remix]"),t("OutboundLink")],1)]),n._v(" "),t("li",[n._v("solc 工具")])]),n._v(" "),t("p",[n._v("编译结果")]),n._v(" "),t("ul",[t("li",[n._v("字节码(bytecode): 是 solidity 代码被翻译以后的信息，包含了二进制的计算机指令。")]),n._v(" "),t("li",[n._v("ABI: 应用程序二进制接口,以 json 文件表示。")])]),n._v(" "),t("h3",{attrs:{id:"_3-合约部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-合约部署"}},[n._v("#")]),n._v(" 3. 合约部署")]),n._v(" "),t("p",[n._v("可以查看此目录下的完整脚本： L6_sample.js"),t("br"),n._v("\n涉及到的接口:")]),n._v(" "),t("ul",[t("li",[n._v('eth.web3.estimateGas({"from address"}): 估算交易的 GAS 费, from address 是必须的参数')]),n._v(" "),t("li",[n._v("web3.eth.Contract(abi): 自动将所有的调用转换为基于 RPC 的底层 ABI 调用")]),n._v(" "),t("li",[n._v("web3.eth.accounts.signTransaction: 本地签名交易")]),n._v(" "),t("li",[n._v("web3.eth.sendSignedTransaction: 发送交易")])])])}),[],!1,null,null,null);s.default=a.exports}}]);
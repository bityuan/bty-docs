(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{242:function(v,e,l){v.exports=l.p+"assets/img/Blockchain_Template_interaction.0d0f0c3e.png"},580:function(v,e,l){"use strict";l.r(e);var _=l(1),t=Object(_.a)({},(function(){var v=this,e=v.$createElement,_=v._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"blockchain模块"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#blockchain模块"}},[v._v("#")]),v._v(" Blockchain模块")]),v._v(" "),_("p",[v._v("Blockchain模块是处理block的组件，包括存储block信息，将block加入主链或者平行公链，同步block；同时还对外提供查询block以及区块链状态信息的接口。")]),v._v(" "),_("h2",{attrs:{id:"blockchain模块交互"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#blockchain模块交互"}},[v._v("#")]),v._v(" Blockchain模块交互")]),v._v(" "),_("p",[_("img",{attrs:{src:l(242),alt:"Blockchain模块交互"}})]),v._v(" "),_("ul",[_("li",[v._v("与Consensus模块的交互：处理Consensus模块打包的区块，处理Consensus模块查询block信息的请求。")]),v._v(" "),_("li",[v._v("与P2P模块的交互：处理P2P模块接收的广播区块，向P2P模块发送区块进行广播，处理P2P模块查询block信息的请求。")]),v._v(" "),_("li",[v._v("与Mempool、Executor模块的交互：处理这两个模块查询区块链状态的请求。")])]),v._v(" "),_("h2",{attrs:{id:"blockchain逻辑结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#blockchain逻辑结构"}},[v._v("#")]),v._v(" Blockchain逻辑结构")]),v._v(" "),_("p",[v._v("Blockchain模块主要由三个子模块组成：消息接收模块、区块同步模块和区块存储模块。")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("消息接收模块")]),v._v("：接收其他模块的有关block以及区块链状态的信息查询的消息。")]),v._v(" "),_("li",[_("strong",[v._v("区块同步模块")]),v._v("：在节点起动之后，比较网络中peer最新高度和自己的高度，如果自己的高度比peer的最新高度低就主动发起block的同步请求追赶主链。")]),v._v(" "),_("li",[_("strong",[v._v("区块存储模块")]),v._v("：将block信息按照不同类型存储到数据库。")])]),v._v(" "),_("h2",{attrs:{id:"blockchain子模块处理逻辑"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#blockchain子模块处理逻辑"}},[v._v("#")]),v._v(" Blockchain子模块处理逻辑")]),v._v(" "),_("h3",{attrs:{id:"消息接收模块"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#消息接收模块"}},[v._v("#")]),v._v(" 消息接收模块")]),v._v(" "),_("p",[v._v("消息接收模块接收其他模块的有关block以及区块链状态的信息查询的消息。")]),v._v(" "),_("p",[_("strong",[v._v("block相关信息")])]),v._v(" "),_("ul",[_("li",[v._v("EventGetBlocks：获取block信息")]),v._v(" "),_("li",[v._v("EventGetHeaders：获取block header信息")]),v._v(" "),_("li",[v._v("EventAddBlock：添加从peer同步过来的block")]),v._v(" "),_("li",[v._v("EventAddBlockHeaders：添加从peer同步过来的block header")]),v._v(" "),_("li",[v._v("EventAddBlockDetail：添加从共识模块过来的block")]),v._v(" "),_("li",[v._v("EventBroadcastAddBlock：添加从peer广播过来的block")]),v._v(" "),_("li",[v._v("EventGetBlockHeight：获取最新block高度")]),v._v(" "),_("li",[v._v("EventGetLastHeader：获取最新blockheader信息")]),v._v(" "),_("li",[v._v("EventGetLastBlock：获取最新block信息")])]),v._v(" "),_("p",[_("strong",[v._v("区块链浏览器相关的消息")])]),v._v(" "),_("ul",[_("li",[v._v("EventGetTransactionByAddr：通过账户地址获取地址上所有交易的hash值")]),v._v(" "),_("li",[v._v("EventGetTransactionByHash：通过交易的hash值获取对应的交易信息")]),v._v(" "),_("li",[v._v("EventGetBlockOverview：通过block hash值获取此block的header信息以及交易hash列表")]),v._v(" "),_("li",[v._v("EventGetAddrOverview：通过账户地址获取账户收到的币，账户当前余额以及参与的交易数量。")]),v._v(" "),_("li",[v._v("EventGetBlockHash：通过block高度获取block hash")]),v._v(" "),_("li",[v._v("EventQueryTx：通过交易hash获取具体的交易信息，包含txproof证明。")])]),v._v(" "),_("p",[_("strong",[v._v("平行链相关消息")])]),v._v(" "),_("ul",[_("li",[v._v("EventGetLastBlockSequence：获取本节点最新区块对应的sequence")]),v._v(" "),_("li",[v._v("EventGetSeqByHash：获取区块哈希对应的sequence")]),v._v(" "),_("li",[v._v("EventAddParaChainBlockDetail：添加来自平行链共识的block")]),v._v(" "),_("li",[v._v("EventDelParaChainBlockDetail：删除来自平行链共识的block")]),v._v(" "),_("li",[v._v("EventLocalGet：查询存储的键值对")])]),v._v(" "),_("p",[_("strong",[v._v("其他消息")])]),v._v(" "),_("ul",[_("li",[v._v("EventIsSync：查询区块链的同步状态")]),v._v(" "),_("li",[v._v("EventIsNtpClockSync：查询ntp网络时间同步状态")]),v._v(" "),_("li",[v._v("EventLocalPrefixCount：查询指定前缀的key的数量")])]),v._v(" "),_("h3",{attrs:{id:"区块同步模块"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#区块同步模块"}},[v._v("#")]),v._v(" 区块同步模块")]),v._v(" "),_("p",[v._v("在节点起动之后，比较网络中peer最新高度和自己的高度，如果自己的高度比peer的最新高度低就主动发起block的同步请求追赶主链。")]),v._v(" "),_("p",[v._v("区块同步，包括定时处理逻辑和即时处理逻辑。")]),v._v(" "),_("p",[_("strong",[v._v("定时处理")])]),v._v(" "),_("ul",[_("li",[v._v("FetchPeerList：定时从p2p模块获取网络中peer信息，并保存到本地peerList。")]),v._v(" "),_("li",[v._v("SynBlocksFromPeers：定时从peerList中请求指定的blocks。")]),v._v(" "),_("li",[v._v("CheckTipBlockHash：定时检测本节点最新高度block hash是否和peerlist中对应高度的block hash一致。")]),v._v(" "),_("li",[v._v("CheckBestChain：定时检测并获取一个最优链列表，保证请求block的peers和本节点都在同一条链上。")]),v._v(" "),_("li",[v._v("RecoveryFaultPeer：故障peer节点的定时检测恢复。")])]),v._v(" "),_("p",[_("strong",[v._v("即时处理")])]),v._v(" "),_("p",[v._v("收到三种来源的block并立即进行处理：共识模块打包的block、广播 block和同步block。")]),v._v(" "),_("p",[v._v("处理入口函数"),_("code",[v._v("ProcessBlock()")]),v._v("，过程如下：")]),v._v(" "),_("ul",[_("li",[v._v("判断block是否已经存在本节点的主/平行链上")]),v._v(" "),_("li",[v._v("判断block是否已经存在本节点的孤儿链上")]),v._v(" "),_("li",[v._v("判断block的父block是否已存在本节点的主/平行链上")]),v._v(" "),_("li",[v._v("尝试将block添加到主/平行链上")]),v._v(" "),_("li",[v._v("尝试处理孤儿链中以此block为父区块的孤儿block")])]),v._v(" "),_("h3",{attrs:{id:"区块存储模块"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#区块存储模块"}},[v._v("#")]),v._v(" 区块存储模块")]),v._v(" "),_("p",[v._v("区块存储模块负责将block信息按照不同类型存储到数据库。")]),v._v(" "),_("p",[_("strong",[v._v("存储数据内容")])]),v._v(" "),_("p",[v._v("存储格式均为"),_("code",[v._v("key-value")]),v._v("形式，包括如下数据内容：")]),v._v(" "),_("blockquote",[_("p",[v._v("区块相关")])]),v._v(" "),_("ul",[_("li",[v._v('key("blockLastHeight")：存储最新区块高度')]),v._v(" "),_("li",[v._v('key("Hash:%v", blockhash)：存储区块高度')]),v._v(" "),_("li",[v._v('key("Body:%v", blockhash)：存储区块body')]),v._v(" "),_("li",[v._v('key("Header:%v", blockhash)：存储区块header')]),v._v(" "),_("li",[v._v('key("TD:%v", blockhash)：存储区块body')]),v._v(" "),_("li",[v._v('key("Height:%v", height)：存储区块高度对应的区块hash')]),v._v(" "),_("li",[v._v('key("HH:%v", height)：存储区块高度对应的区块header')]),v._v(" "),_("li",[v._v('key("LastSequence")：存储最新sequence')]),v._v(" "),_("li",[v._v('key("Seq:%v", sequence)：存储sequence对应的区块hash')]),v._v(" "),_("li",[v._v('key("HashToSeq:%v", blockhash): 存储区块hash对应的sequence')])]),v._v(" "),_("blockquote",[_("p",[v._v("交易相关")])]),v._v(" "),_("ul",[_("li",[v._v('key("TxAddrHash:%s:%s", addr, heightindex)：存储地址相关的交易hash列表')]),v._v(" "),_("li",[v._v('key("TxAddrDirHash:%s:%d:%s", addr, flag, heightindex)：存储地址相关的某个分类的的交易hash列表')]),v._v(" "),_("li",[v._v('key("AddrTxsCount:%s", addr)：存储地址参与的交易数量')])]),v._v(" "),_("p",[_("strong",[v._v("数据访问接口")])]),v._v(" "),_("blockquote",[_("p",[v._v("获取和存储最新block信息")])]),v._v(" "),_("ul",[_("li",[v._v("UpdateHeight")]),v._v(" "),_("li",[v._v("UpdateLastBlock")]),v._v(" "),_("li",[v._v("LastHeader")]),v._v(" "),_("li",[v._v("LastBlock")])]),v._v(" "),_("blockquote",[_("p",[v._v("获取和存储block信息")])]),v._v(" "),_("ul",[_("li",[v._v("LoadBlockByHeight")]),v._v(" "),_("li",[v._v("LoadBlockByHash")]),v._v(" "),_("li",[v._v("GetHeightByBlockHash")]),v._v(" "),_("li",[v._v("GetBlockHashByHeight")]),v._v(" "),_("li",[v._v("GetBlockHeaderByHeight")]),v._v(" "),_("li",[v._v("GetBlockHeaderByHash")]),v._v(" "),_("li",[v._v("GetTdByBlockHash")]),v._v(" "),_("li",[v._v("SaveTdByBlockHash")])]),v._v(" "),_("blockquote",[_("p",[v._v("存储和删除区块和交易")])]),v._v(" "),_("ul",[_("li",[v._v("SaveBlock")]),v._v(" "),_("li",[v._v("DelBlock")]),v._v(" "),_("li",[v._v("GetTx")]),v._v(" "),_("li",[v._v("AddTxs")]),v._v(" "),_("li",[v._v("DelTxs")])])])}),[],!1,null,null,null);e.default=t.exports}}]);